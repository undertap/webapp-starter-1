---
description: Dynamic Smart Form for Attachment Profile & Emotional Needs PRD
globs: 
alwaysApply: false
---
PRD: Dynamic Smart Form for Attachment Profile & Emotional Needs

1. Overview

The AI-powered meditation app will include a dynamic smart form to assess each user’s attachment style, emotional tendencies, and meditation needs. The goal is to gather personal insights in a conversational, empathetic way, then use that data to generate personalized meditation scripts for the user. The form will come in two versions to cater to different user engagement levels:
	•	Short Version (5–7 questions): A quick introductory form for new users. It collects just enough information to create a free custom meditation on the spot, lowering the entry barrier for first-time users.
	•	Long Version (~10 questions): A more in-depth questionnaire for returning or engaged users who want deeper personalization. It builds on the short form with additional questions to refine the user’s emotional profile and attachment style.

Both versions use smart, adaptive logic to tailor the flow of questions based on the user’s answers, creating a smooth and personalized experience. The tone of the form is empathetic and conversational, making the interaction feel more like a guided dialogue than a survey. Users can complete the form at their own pace with multi-session support (they can save progress and resume later). Upon completion, the system will internally generate a User Analysis (a summary of the user’s attachment profile and key emotional needs, not directly shown to the user) which will inform all future AI-generated meditation scripts. Finally, the user receives a personalized recommendation for a meditation session (e.g. a suggested meditation type or focus) immediately after submitting the form.

2. Technical Requirements & Implementation

A. Tech Stack Integration
	•	Frontend: Next.js (React framework) with Tailwind CSS for styling and shadcn/ui component library for a consistent UI. The form will be implemented as a multi-step React component in Next.js, leveraging shadcn/ui for accessible form controls (radios, sliders, etc.) and Tailwind for custom styling.
	•	Backend: Bun (JavaScript runtime) with Hono (minimal web framework) for the API layer. The Bun+Hono backend will handle form submission endpoints, apply business logic for analysis, and interface with the database and AI services. This backend will run separately from Next.js (deployed on Render) but will be consumed by the Next.js frontend via HTTP APIs.
	•	Database: Supabase (Postgres) to store user profile data and form responses. Supabase will also be used to persist the generated user analysis and any other state that needs to be retained server-side. We will design tables (or JSON columns) for questionnaire responses and the computed profile summary.
	•	Authentication: Clerk for user authentication and session management. Clerk will be integrated into the Next.js frontend to handle sign-up/sign-in, and provide user identities. The form progress can be tied to the Clerk user ID so that saved responses are associated with the correct user. Clerk’s JWT/session token will be used by the Bun API to verify user and authorize data operations.
	•	State Management: React state and hooks will manage the form inputs locally during a session. Additionally, we may use Zustand (a lightweight state management library) to preserve form state across page navigations or refreshes. Zustand can also sync with localStorage if needed, ensuring that even if the user is not actively online or logged in, their in-progress answers aren’t lost.
	•	Deployment: The Next.js frontend will be deployed on Vercel (for fast global delivery and edge caching), and the Bun/Hono API will be deployed on Render as a persistent service. This separation allows independent scaling of the front-end and back-end. The frontend will call the back-end API (e.g. via REST endpoints) for saving progress, submitting the form, and retrieving the meditation recommendation.

B. Smart Form Logic & Rules
	•	Multi-step Flow & Progress Indicator: The form is presented in a step-by-step wizard format with a visible progress bar or step count. Breaking the questionnaire into manageable steps prevents users from feeling overwhelmed ￼. A progress bar will update as the user answers each question, giving clear feedback on how far along they are.
	•	Conversational Tone & UX: Questions and prompts are phrased in a friendly, empathetic manner, and displayed one at a time to simulate a natural conversation. Presenting one question at a time in a conversational style improves user engagement and makes the experience feel less like a clinical survey ￼. The UI may include brief acknowledgments or guiding text between questions (e.g., “Thanks for sharing that. Here’s another question…”) to enhance the conversational flow.
	•	Dynamic Branching (Conditional Questions): The form uses conditional logic to adapt to user responses. Certain answers will branch to relevant follow-up questions or skip irrelevant ones. This ensures users only answer questions that apply to them, keeping the flow relevant and maintaining momentum ￼. For example, if a user indicates they withdraw when stressed, the next question might delve into their self-soothing habits, whereas a user who seeks others when stressed might get a question about support systems.
	•	Ability to Skip Questions: Every question will offer a “Skip” option. Users can choose not to answer something if it makes them uncomfortable or they simply don’t know how to answer. Skipped questions are either bypassed entirely or handled by showing a neutral follow-up. Skipping will not block the user from completing the form; it just means less data for the analysis (the system can infer or leave out certain aspects in the profile).
	•	Multi-Session Support (Save and Resume): Users can save their progress at any point and resume the form later, even across different sessions or devices. Without a save/resume feature, longer forms often get abandoned and frustrate users (and result in lost data) ￼. Providing the ability to pause and continue later gives users peace of mind that their input is preserved, increasing the likelihood they’ll complete the form ￼. Implementation-wise, partial responses are saved to the database (or cached locally) after each step or when the user clicks “Save”. When the user returns, the form state is restored either from Supabase (if logged in) or local storage (if not logged in, though ideally users use the authenticated flow for multi-session).
	•	Internal Analysis Generation: After the user completes the form, the backend will compile their responses into a User Analysis Profile. This profile may include derived information such as the user’s likely attachment style (e.g. secure, anxious, avoidant), key emotional triggers, preferred coping mechanisms, and what they seek from meditation. This analysis is generated behind the scenes (not shown directly to the user) using the user’s answers. We can implement this by defining rules/mappings for certain answer combinations, and/or by using an AI service (e.g., an OpenAI API call) to summarize the responses into insights. The result will be stored in Supabase as part of the user’s profile data for future use.
	•	Personalized Recommendation on Completion: Upon submission of the form, the user is presented with a tailored meditation suggestion. For example, based on their profile, the app might say: “We recommend a grounding meditation focused on self-soothing and security.” This recommendation is generated by the backend logic using the analysis profile. It could be as simple as mapping an attachment style to a meditation type, or more dynamically generated via AI. The recommendation text and suggested meditation focus will be displayed on the completion screen, along with a prompt to start that meditation. (In the case of the short form for new users, this is the promised free custom meditation offer.)

C. Question Flow

The content and ordering of questions differ slightly between the short form and the long form, though they share some core topics. The long form essentially extends the short form with additional depth in each area. Both forms will use the adaptive logic described above. Below is an outline of the question topics and examples for each version:

Short Form (New Users – ~5-7 Questions)
	•	Attachment Tendencies: Example question: “Do you often seek reassurance in relationships?” – A quick gauge of whether the user leans anxious (seeks reassurance) or avoidant (tends to self-reliance) in attachments.
	•	Emotional Check-In: Example question: “What emotion do you struggle with the most?” – Identifies a primary challenging emotion (anger, anxiety, sadness, etc.) to tailor the meditation’s emotional focus.
	•	Meditation Preference: Example question: “Do you prefer visual imagery, soothing sounds, or spoken guidance during meditation?” – Assesses the user’s preferred sensory modality or style of meditation (to personalize the script format or include certain elements).
	•	Stress Response: Example question: “When you feel stressed, are you more likely to seek comfort from others or withdraw on your own?” – Indicates coping style under stress (social vs. solitary), which relates to attachment and informs the tone of the meditation (e.g., include elements of support vs. self-reliance).
	•	Personal Goal: Example question: “What do you hope meditation will help you with?” – Allows the user to state their primary goal (e.g., reduce anxiety, improve sleep, heal from past trauma, etc.), ensuring the resulting meditation addresses this goal.

Outcome: The short form generates a basic user profile and an initial custom meditation. The profile is a broad-strokes analysis of the user (e.g., a hint of their attachment style and key emotional need) and is used to immediately create a one-time personalized meditation. This meditation script (or session) will be offered to the user as a free, customized experience right after completing the form. The profile data is saved for reference but is less detailed than the long form’s profile.

Long Form (Engaged Users – ~10 Questions)
	•	Detailed Attachment Assessment: Example question: “How do you typically react when someone you care about pulls away or needs space unexpectedly?” – Probes a specific scenario to identify attachment behavior with more nuance. The answer helps classify the user’s attachment style (e.g., anxious might panic or chase, avoidant might emotionally shut down, secure might communicate calmly).
	•	Emotional History & Triggers: Example question: “What is your earliest memory of feeling emotionally safe or unsafe?” – Encourages the user to recall formative experiences around emotional security. This provides insight into deep-rooted emotional triggers or sources of comfort, which can inform the narrative used in meditations (for example, referencing themes of safety or inner-child healing).
	•	Meditation/Mindfulness Background: Example question: “Have you ever practiced mindfulness or meditation before? If so, what was your experience like?” – Determines the user’s familiarity and prior experience with meditation. A novice might need more guidance and simpler techniques, whereas an experienced user might prefer less basic instruction and more depth.
	•	Validation Style: Example question: “Do you tend to rely on others to make you feel valued, or are you able to find self-worth from within?” – Assesses whether the user leans toward external validation or internal self-validation. This insight can influence the meditation script; for instance, a user reliant on external validation might benefit from affirmations that encourage self-acceptance.
	•	Personal Growth Interests: Example question: “What areas of your emotional life are you most interested in improving right now?” – Allows the user to specify growth areas (e.g., patience, self-love, overcoming fear, trust in others). These interests guide the themes and intentions of future meditations.

Outcome: The long form produces a detailed attachment-based profile for the user. This profile encompasses the user’s attachment style categorization, specific emotional needs, triggers, preferred coping mechanisms, and meditation preferences. It serves as a comprehensive reference for generating all future meditation scripts tailored to the user. After the long form, every personalized meditation the app generates (during future sessions) will draw on this detailed profile to ensure relevance. Upon completing the long form, the user still gets an immediate meditation recommendation or customized session, but more importantly, their ongoing experience in the app becomes highly personalized.

D. Data Storage & API Considerations
	•	Response Storage: All form responses (both short and long form) will be saved in the Supabase Postgres database. Each answer can be stored with a reference to the question and the user’s ID. We might use a JSONB column to store the whole response set for each form submission, or a normalized schema (e.g., a responses table with one row per question answered). Using Supabase ensures data is persisted securely and can be queried for analytics or further AI processing. Sensitive personal data like emotional profile answers will be protected and access-controlled – only the AI generation service and authorized parts of the app will use this data.
	•	User Profile Integration: The User Analysis Profile generated from the form will be stored as part of the user’s profile record in the database. This could be a separate table (e.g., user_analysis) linked to the user, or additional columns in the user’s record (for key traits like attachment_style, etc.) along with a text summary. Storing this means the app doesn’t have to recompute the analysis from scratch every time; it can be updated when the user retakes the long form or if they update answers.
	•	Backend Processing (Hono API): When the user submits the form, the Next.js frontend will call a Hono API endpoint (e.g. POST /api/form/submit). The Hono handler will authenticate the request (using Clerk’s session token to identify the user), then process the answers. Processing involves feeding the answers into the analysis logic. If using AI, the backend might call an OpenAI API with a prompt that includes the Q&A and asks for an attachment style summary and meditation suggestions. Alternatively, a rules-based approach will classify answers (for example, count how many “anxious vs avoidant indicators” to decide attachment style). The result is an analysis object (e.g., {attachmentStyle: "Anxious", primaryEmotion: "anger", ...} plus perhaps a short narrative summary). This object is saved to Supabase and used to generate the meditation recommendation.
	•	Meditation Script Generation: The user’s analysis profile will feed into the meditation-generation pipeline. For the immediate post-form recommendation, the backend can either generate a short meditation script on the fly or select one from a library of templates. Since this is an AI-powered meditation app, we likely use an AI model to generate a script with the profile as context (ensuring the script addresses the user’s needs). The API might have an endpoint like GET /api/meditation/recommendation which uses the stored profile to produce a tailored script or at least return the type of meditation to do. This process should be quick enough to give the user feedback instantly after the form is done.
	•	Performance & Scalability: Both the short and long forms should load questions and submit answers efficiently. Most logic is on the client for navigation, but for saving to server we’ll batch calls to reduce network overhead (e.g., autosave after each page or group of questions, rather than every keystroke). The Bun/Hono backend is chosen for its performance; it will handle bursts of form submissions and AI requests. We must also consider rate-limiting or queueing if using external AI APIs to avoid hitting limits when many users finish forms around the same time.
	•	Security & Privacy: The nature of the form means we are collecting sensitive personal information (emotions, personal attachment behaviors). All communications should be over HTTPS, and data in the database should be secured (Supabase encrypts data at rest by default). Access to form data and analysis is restricted to the functions that need them (e.g., meditation generation). We will also include a privacy disclaimer to users before they start the long form, clarifying why we collect this data and how it will be used to help them.

3. Development Roadmap
	•	Phase 1: Frontend UI Foundation – Implement the multi-step form UI in Next.js. This includes creating the form pages/components for both the short and long form, with a progress bar at the top. At this stage, questions can be hard-coded, and navigation (Next, Back, Skip) between steps is set up. We will also integrate shadcn/ui components for form inputs and ensure the design is mobile-friendly and accessible.
	•	Phase 2: Dynamic Flow & Conversational UX – Add the smart logic to the form. Define the question flow rules and implement conditional branching in the React state. For example, introduce logic so that answering “X” to question 2 will cause question 3 to be skipped or changed. Also refine the conversational touches in the UI (e.g., micro-copy that thanks the user or transitions between questions). Ensure the progress bar updates correctly even when the total number of steps can change dynamically (this may involve making the progress indicator adaptive).
	•	Phase 3: Backend Integration & Data Persistence – Set up the Bun + Hono API and connect the form to the database. Implement endpoints for saving progress (maybe PATCH /form/progress) and final submission (POST /form/submit). Integrate Clerk authentication so that these endpoints know which user is saving data. Use Supabase client (or direct REST calls) in the Hono handlers to write the responses to the DB. Also, use Clerk on the frontend to manage user sessions and tie into the save/resume logic (e.g., only allow resume if the user is logged in and has a saved state). Test that a user can close the app mid-way and later retrieve their progress.
	•	Phase 4: Analysis & Personalization Features – Implement the generation of the internal user analysis and the meditation recommendation. This might involve integrating an AI API (OpenAI or similar) into the backend. Develop the prompt or logic that takes user responses and outputs an analysis summary. Once that works, create the logic for producing a recommended meditation (this could be an AI-generated text or selecting a predefined meditation program). Frontend work in this phase will display the recommendation to the user and possibly allow them to start the meditation. We will also store the analysis in the database and make sure it’s accessible for future meditation sessions.
	•	Phase 5: Testing, Refinement, and UX Polish – Perform thorough testing of the entire flow, including edge cases: skipping all questions, leaving and returning, unusual combinations of answers, etc. Collect feedback on the tone and wording of questions to ensure they are truly empathetic and clear. Refine the UI (add subtle animations or transitions between steps, polish the progress indicator, ensure mobile layouts are perfect). Optimize performance (lazy load anything non-critical, minimize API calls). Finally, ensure that the hand-off from form completion to starting a meditation session is smooth, encouraging the user to continue into their personalized meditation journey.